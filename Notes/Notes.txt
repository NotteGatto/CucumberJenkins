1) Cucumber class01

Given --- precondition / prerequisite
When --- perform action
And --- supporting tag that can be used with all other tags (you can use it with Given, When, Then when we have multiple commands)
Then --- expected output

Who writes Acceptance criteria? BA
Who uses Gherkin?
BA -- acceptance criteria
QA


US 123321 Admin should be able to search an employee in HRMS application
Acceptance criteria:
1.	Search by id
2.	Search by name

1.
Given user opens browser and navigated to HRMS (precondition)
And user is logged in as an admin (precondition)
And user is on employee list page
When user enters valid employee id
And user clicks on search button
Then user see employee in the employee table

2.
Given user opens browser and navigated to HRMS (precondition)
And user is logged in as an admin (precondition)
And user is on employee list page
When user enters firstname and last
And user clicks on search button
Then user see employee in the employee table

Maven --- Java (to create our project)
Selenium
Cucumber
Apache
Commons

User story - verify login functionality
Acceptance criteria:
- valid admin login
- valid ess login (Lower access level, fewer permissions)
- valid username and invalid password



2) Cucumber class02
What is cucumber framework?
it supports BDD where we use Gherkin language

tags: Given, When, And, Then ----> Scenario (testcase) Feature (user story)

Given - precondition
When - actions to be done
Then - expected output
And - it is a supporting keyword that can be used with other keywords in a scenario

What is step definition (описание, определение)? (step definition file, steps library, steps)
Step definition is the code implemented for the steps mentioned in feature file

Page Object Model design pattern (шаблон)

Test runner
We use test runner to execute all features in multiple combinations

features = we define the path of our feature file here
glue = we define the path of our steps here
dry run = when it is set to true, it stops actual execution and scan all the steps
strict=true   alternative to dryRun, it checks all steps definition
monochrome = it removes all unreadable characters from the console output
tags = we can segregate (by groups: @smoke, @regression, @sprint, @datatable) scenarios based on tags and can execute them accordingly

WE CAN DEFINE TAG ON "FEATURE", NOT ONLY "SCENARIO" !!! segregation can be done on Scenario and ALSO on Feature level can categories!!!

@sprint10
Feature: Login validation

  @smoke @sprint3
  Scenario: Valid admin login
    When user enters valid username and password
    And user clicks on login button
    Then admin user is successfully logged in



3) Cucumber class03

Runner class -this is the configuration file in cucumber framework from we can execute our feature

@RunWith - junit
@CucumberOptions - feature, glue, dryRun, monochrome, strict, tags

HOOKS (define in steps package, class) in cucumber inside "STEPS" with extends CommomMethods
@Before---> open browser ---we use this to define our pre-conditions
@After ---> tearDown ---  we use this to define our post-conditions

what is the difference in between hooks and background?
Background is applicable for one particular feature file, limited to a feature specific (if you don't have common methods in scenarios u can't have it)
Hooks are applicable for all your entire project, the scenarios available in features

Data driven test

mike123 meme lopez
nailya321 meme reston
sule456 meme abc



Review:
What is BDD -
behavioral driven development is a technique which allows us to write scenarios in plain english sentences.

gherkin language

Feature - To define the scope of feature file, this should be the first line of every feature file
Scenario - it is considered as test cases in cucumber
Given - pre-condition
When - To perform actions
And - Supporting tag
Then - Expected result/output


step definitions - we write the implemented steps here for all the feature files

Test runner - it is a runner class which allows to configure various options for execution

hooks - to write pre condition and post condition we use hooks
@Before and @After


2) Cucumber class04
Test runner:
@RunWith
@CucumberOptions - features -path of our feature file
glue - we provide path our steps package
dryRun if it is set to true, it checks all the definitions of steps if it is not implemented, it gives us snippet to implement
monochrome - to avoid/remove all unreadable characters from console output
tags - to define/filter scenarios for execution we use tags
strict - alternative to dryRun

Hooks - @Before - Pre condition
        @After - post condition

Background
In a specific feature file, if we have common steps for all scenarios, we write them in feature file

Hooks is applicable to all the feature whereas background is limited to one specific feature file

Scenario and Scenario Outline difference -
When we use "@examples" table for data driven testing, we use scenario outline instead of scenario

"@datatable" - applicable only for one particular step, so my step will execute multiple times,
               not my entire scenario, background and hooks one time only

HW - User should be able to modify employee personal details
Driver's license no
License exp date
SSN
SIN
Gender
Marital status
Nationality
DOB
Nickname
Smoker
Military services

User should be able to modify employee details
Fields to modify -
DL
License exp date
DOB
Marital status
Smoker
Nationality
Military services


Class 5

Recap -
1) Datatable as list - when we don't provide headers in the table
2) excel reading example for adding the employees -
3) plugins- pretty is responsible to print all the steps in the console
3) html plugin generates cucumber.html report in target folder
4) takeScreenshot Method - We use Scenario in hooks that accepts array of byte
                           that's why we changed takescreenshot method in common methods class
5) cucumber maven report - it generates json report in target under cucumber-html-report


1) mvn clean verify -Dcucumber.filter.tags="@test"
2) mvn test -Dcucumber.options="--tags @test" //if 1st will not work


How to start your cucumberFramework:
1) utils
2) config
3) pom


